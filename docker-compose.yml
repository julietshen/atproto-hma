services:
  # HMA Service
  hma:
    image: ghcr.io/facebook/threatexchange/hma:latest
    ports:
      - "5000:5000"
    environment:
      - POSTGRES_USER=media_match
      - POSTGRES_PASSWORD=hunter2
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DBNAME=hma
      - OMM_CONFIG=/build/reference_omm_configs/development_omm_config.py
      - POSTGRES_CONNECTION_STRING=postgresql://media_match:hunter2@db:5432/hma
      - SQL_ALCHEMY_DATABASE_URI=postgresql://media_match:hunter2@db:5432/hma
    command: flask --app OpenMediaMatch.app run --host=0.0.0.0 --port=5000 --debug
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - hma-network

  # ATProto-HMA Integration Service
  atproto-hma:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/atproto_hma
      - HMA_API_URL=http://hma:5000
      - LOG_LEVEL=INFO
      - PORT=3000
      - HOST=0.0.0.0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - hma
      - db
    networks:
      - hma-network

  # PerchPics Service
  perchpics:
    build:
      context: ../perchpics
      dockerfile: Dockerfile
    ports:
      - "3002:3002" # PDS Server
      - "3000:3000" # Vite dev server
    environment:
      - PDS_PORT=3002
      - PDS_HOST=0.0.0.0
      - VITE_PORT=3000
      - VITE_HOST=0.0.0.0
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3002,http://localhost:3003
      - HMA_API_URL=http://atproto-hma:3000/api/v1
    volumes:
      - ../perchpics/data:/app/data
      - ../perchpics/logs:/app/logs
    depends_on:
      - atproto-hma
    networks:
      - hma-network

  # Database
  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=hma,atproto_hma
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-multiple-pg-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-pg-dbs.sh
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hma-network

volumes:
  postgres-data:

networks:
  hma-network:
    driver: bridge 